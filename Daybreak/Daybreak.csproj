<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <RootNamespace>Daybreak</RootNamespace>
    <TargetFramework>net9.0-windows</TargetFramework>
    <UseWPF>true</UseWPF>
    <Nullable>enable</Nullable>
    <Platforms>x86;x64</Platforms>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <LangVersion>preview</LangVersion>
    <ApplicationIcon>Daybreak.ico</ApplicationIcon>
    <IncludePackageReferencesDuringMarkupCompilation>true</IncludePackageReferencesDuringMarkupCompilation>
    <EnableWindowsTargeting>true</EnableWindowsTargeting>
    <UserSecretsId>cfb2a489-db80-448d-a969-80270f314c46</UserSecretsId>
    <RuntimeIdentifier>win-x86</RuntimeIdentifier>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="Resources\NotifyClose.wav" />
    <None Remove="Resources\NotifyError.wav" />
    <None Remove="Resources\NotifyInformation.wav" />
    <None Remove="Resources\Snow1.png" />
    <None Remove="Resources\Snow2.png" />
    <None Remove="Resources\Snow3.png" />
    <None Remove="Resources\Snow4.png" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="Resources\NotifyClose.wav" />
    <EmbeddedResource Include="Resources\NotifyError.wav" />
    <EmbeddedResource Include="Resources\NotifyInformation.wav" />
    <EmbeddedResource Include="Resources\Snow1.png" />
    <EmbeddedResource Include="Resources\Snow2.png" />
    <EmbeddedResource Include="Resources\Snow3.png" />
    <EmbeddedResource Include="Resources\Snow4.png" />
  </ItemGroup>

  <Target Name="AddUserSecrets" BeforeTargets="PrepareForBuild" Condition=" '$(UserSecretsId)' != '' ">
    <PropertyGroup>
      <UserSecretsFilePath Condition=" '$(OS)' == 'Windows_NT' ">
		$([System.Environment]::GetFolderPath(SpecialFolder.UserProfile))\AppData\Roaming\Microsoft\UserSecrets\$(UserSecretsId)\secrets.json
	  </UserSecretsFilePath>
	  <UserSecretsFilePath Condition=" '$(OS)' == 'Unix' ">
		$([System.Environment]::GetFolderPath(SpecialFolder.UserProfile))/.microsoft/usersecrets/$(UserSecretsId)/secrets.json
	  </UserSecretsFilePath>
    </PropertyGroup>
    <ItemGroup>
      <EmbeddedResource Include="$(UserSecretsFilePath)" Condition="Exists($(UserSecretsFilePath))" />
    </ItemGroup>
  </Target>
		
  <ItemGroup>
    <PackageReference Include="Elastic.OpenTelemetry" />
    <PackageReference Include="OpenTelemetry.Exporter.Console" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Http" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Runtime" />
    <PackageReference Include="Reloaded.Assembler" />
    <PackageReference Include="System.Private.Uri" />
    <PackageReference Include="WPF-UI" />
    <PackageReference Include="WpfExtended" />
    <PackageReference Include="WpfExtended.SourceGeneration" />
    <PackageReference Include="WpfScreenHelper" />
    <PackageReference Include="WriteableBitmapEx" />
    <PackageReference Include="Squealify" />
    <PackageReference Include="System.Formats.Asn1" />
    <PackageReference Include="System.IO.Compression" />
    <PackageReference Include="System.Linq.Async" />
    <PackageReference Include="PeNet" />
    <PackageReference Include="Plumsy" />
    <PackageReference Include="securifybv.ShellLink" />
    <PackageReference Include="AvalonEdit" />
    <PackageReference Include="DiffPlex" />
    <PackageReference Include="HtmlAgilityPack" />
    <PackageReference Include="ini-parser-netstandard" />
    <PackageReference Include="LiveChartsCore.SkiaSharpView.WPF" />
    <PackageReference Include="MahApps.Metro" />
    <PackageReference Include="Microsoft.CorrelationVector" />
    <PackageReference Include="Microsoft.Data.Sqlite" />
    <PackageReference Include="Microsoft.Data.Sqlite.Core" />
    <PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" />
    <PackageReference Include="Microsoft.Xaml.Behaviors.Wpf" />
    <PackageReference Include="NAudio" />
  </ItemGroup>
	
  <ItemGroup>
    <ProjectReference Include="..\Daybreak.Shared\Daybreak.Shared.csproj" />
  </ItemGroup>
	
  <Target Name="PostBuild" AfterTargets="PostBuildEvent" Condition="'$(Configuration)' == 'Release'">
    <Exec Command="echo.&gt;$(Version).version" />
  </Target>

  <Target Name="RemoveDuplicateAnalyzers" BeforeTargets="CoreCompile">
		<!-- Work around https://github.com/dotnet/wpf/issues/6792 -->
    <ItemGroup>
      <FilteredAnalyzer Include="@(Analyzer-&gt;Distinct())" />
      <Analyzer Remove="@(Analyzer)" />
      <Analyzer Include="@(FilteredAnalyzer)" />
    </ItemGroup>
  </Target>

  <!--
  This ItemGroup takes into account changes in the dependency projects. Any changes in any of them will trigger a rebuild
  which will also build those dependencies
  -->
  <ItemGroup>
    <UpToDateCheckInput Include="..\Daybreak.API\**\*.cs" />
    <UpToDateCheckInput Include="..\Daybreak.7ZipExtractor\**\*.cs" />
    <UpToDateCheckInput Include="..\Daybreak.Installer\**\*.cs" />
  </ItemGroup>

  <ItemGroup>
    <DaybreakApiSources Include="..\Daybreak.API\**\*.cs" />
    <DaybreakApiSources Include="..\Daybreak.API\Daybreak.API.csproj" />
    <DaybreakApiSources Include="..\Daybreak.Shared\**\*.cs" />
  </ItemGroup>

  <ItemGroup>
    <DaybreakInstallerSources Include="..\Daybreak.Installer\**\*.cs" />
    <DaybreakInstallerSources Include="..\Daybreak.Installer\Daybreak.Installer.csproj" />
    <DaybreakInstallerSources Include="..\Daybreak.Shared\**\*.cs" />
  </ItemGroup>

  <ItemGroup>
    <DaybreakExtractorSources Include="..\Daybreak.7ZipExtractor\**\*.cs" />
    <DaybreakExtractorSources Include="..\Daybreak.7ZipExtractor\Daybreak.7ZipExtractor.csproj" />
    <DaybreakExtractorSources Include="..\Daybreak.Shared\**\*.cs" />
  </ItemGroup>

  <!--
  This is a workaround to determine where to place the dependency projects
  It will first check if PublishDir is set.
  If PublishDir is not set, it will place the dependencies in the output directory of the build.
  The reason we cannot use OutDir is because OutDir does not get set at this stage and is not stable enough to be set individually on each target
  -->
  <PropertyGroup>
    <BaseBuildDir>$(ProjectDir)bin\$(Platform)\$(Configuration)\$(TargetFramework)\$(RuntimeIdentifier)\</BaseBuildDir>
    <DependencyOutput Condition="'$(PublishDir)' != ''">$(PublishDir)</DependencyOutput>
    <DependencyOutput Condition="'$(PublishDir)' == ''">$(BaseBuildDir)</DependencyOutput>
  </PropertyGroup>
  
  <!--
  The targets below build Daybreak.7ZipExtractor.csproj, Daybreak.Installer.csproj and Daybreak.API.csproj
  and places the resulting binaries in the same folder as Daybreak.exe.
  These work with the normal build, as well as with the dotnet publish
  -->
  <Target Name="PublishDaybreak7ZipExtractor" AfterTargets="Build" Inputs="@(DaybreakExtractorSources)" Outputs="$(OutDir)Daybreak.7ZipExtractor.exe">
    
    <Message Importance="high" Text="📦 Daybreak.7ZipExtractor -&gt; $(DependencyOutput)"></Message>
    
    <Exec Command="dotnet publish ..\Daybreak.7ZipExtractor\Daybreak.7ZipExtractor.csproj -c $(Configuration) -o $(DependencyOutput)" />
  </Target>

  <Target Name="PublishDaybreakInstaller" AfterTargets="Build" Inputs="@(DaybreakInstallerSources)" Outputs="$(OutDir)Daybreak.Installer.exe">

    <Message Importance="high" Text="📦 Daybreak.Installer -&gt; $(DependencyOutput)"></Message>
    
    <Exec Command="dotnet publish ..\Daybreak.Installer\Daybreak.Installer.csproj -c $(Configuration) -o $(DependencyOutput)" />
  </Target>

  <Target Name="PublishDaybreakAPI" AfterTargets="Build" Inputs="@(DaybreakApiSources)" Outputs="$(OutDir)Daybreak.API.dll">
    
    <Message Importance="high" Text="📦 Daybreak.API -&gt; $(DependencyOutput)"></Message>
    
    <Exec Command="dotnet publish ..\Daybreak.API\Daybreak.API.csproj -c $(Configuration) -o $(DependencyOutput)" />
  </Target>
</Project>
