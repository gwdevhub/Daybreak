using Microsoft.Xaml.Behaviors;
using System.Linq;
using System.Windows;
using System.Windows.Controls;

namespace Daybreak.Behaviors;
public sealed class RowAutoMargin : Behavior<Grid>
{
    private const string GeneratedRowsTag = "Definition generated by RowAutoMargin.cs";
    public double Margin { get; set; } = 10;

    protected override void OnAttached()
    {
        base.OnAttached();

        /*
         * We need to trigger the behavior only after the object is fully loaded and rows are generated
         */
        this.AssociatedObject.Loaded += this.AssociatedObject_Loaded;
    }

    // TODO #367: Super hacky code below. To be reworked
    private void AssociatedObject_Loaded(object sender, RoutedEventArgs e)
    {
        /*
         * Tag each child with the desired row. Skip children already tagged
         */
        foreach(var child in this.AssociatedObject.Children.OfType<FrameworkElement>())
        {
            if (child.Tag is int desiredRow)
            {
                Grid.SetRow(child, desiredRow);
                continue;
            }

            if (child.Tag is not null)
            {
                continue;
            }

            child.Tag = Grid.GetRow(child);
        }

        /*
         * Remove previously generated rows
         */
        for (var i = 0; i < this.AssociatedObject.RowDefinitions.Count; i++)
        {
            if (this.AssociatedObject.RowDefinitions[i].Tag is string stringTag &&
                stringTag == GeneratedRowsTag)
            {
                this.AssociatedObject.RowDefinitions.RemoveAt(i);
                i--;
            }
        }

        /*
         * The idea is to generate some rows with Margin set as height when we detect that there are more than one rows.
         * First we need to detect if there are more rows.
         */
        if (this.AssociatedObject.RowDefinitions
            .Where(r => r.Tag is not string stringTag || stringTag != GeneratedRowsTag)
            .Where(r => r.Height.Value > 0)
            .Count() <= 1)
        {
            return;
        }

        /*
         * Generate new rows with height set to Margin
         */
        var addedRows = 0;
        for (var i = 0; i < this.AssociatedObject.RowDefinitions.Count - 1; i++)
        {
            if (this.AssociatedObject.RowDefinitions[i + addedRows].Height.Value > 0)
            {
                this.AssociatedObject.RowDefinitions.Insert(i + 1, 
                    new RowDefinition
                    {
                        Height = new GridLength(this.Margin, GridUnitType.Pixel),
                        Tag = GeneratedRowsTag
                    });
                foreach (var child in this.AssociatedObject.Children.OfType<FrameworkElement>())
                {
                    if (child.Tag is int desiredRow &&
                        desiredRow > i - addedRows)
                    {
                        Grid.SetRow(child, Grid.GetRow(child) + 1);
                    }
                }

                i++;
                addedRows++;
            }
        }
    }
}
